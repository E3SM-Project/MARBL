#!/usr/bin/env python

"""
Generate a MARBL diagnostics file containing frequencies for all MARBL diagnostics
available from a particular MARBL_settings_class object (as defined in a JSON file).

This file can be run as a command line script or imported as part of the MARBL_tools module.
To use from a module, all arguments are required in the call

generate_diagnostics_file(MARBL_settings, diagnostics_file_in, diagnostics_file_out)

From the command line
---------------------

usage: MARBL_generate_diagnostics_file.py [-h] [-f DEFAULT_SETTINGS_FILE]
                                          [-j DEFAULT_DIAGNOSTICS_FILE]
                                          [-s {GCM,settings_file}] [-g GRID]
                                          [-i SETTINGS_FILE_IN]
                                          [-d DIAGNOSTICS_FILE_IN]
                                          [-o DIAGNOSTICS_FILE_OUT]

Generate a MARBL settings file from a JSON file

optional arguments:
  -h, --help            show this help message and exit
  -f DEFAULT_SETTINGS_FILE, --default_settings_file DEFAULT_SETTINGS_FILE
                        Location of JSON-formatted MARBL settings
                        configuration file (default: $MARBLROOT/
                        autogenerated_src/default_settings.json)
  -j DEFAULT_DIAGNOSTICS_FILE, --default_diagnostics_file DEFAULT_DIAGNOSTICS_FILE
                        Location of JSON-formatted MARBL diagnostics
                        configuration file (default: $MARBLROOT/
                        autogenerated_src/default_diagnostics.json)
  -s {GCM,settings_file}, --saved_state_vars_source {GCM,settings_file}
                        Source of initial value for saved state vars that can
                        come from GCM or settings file (default:
                        settings_file)
  -g GRID, --grid GRID  Some default values are grid-dependent (default: None)
  -i SETTINGS_FILE_IN, --settings_file_in SETTINGS_FILE_IN
                        A file that overrides values in settings JSON file
                        (default: None)
  -d DIAGNOSTICS_FILE_IN, --diagnostics_file_in DIAGNOSTICS_FILE_IN
                        A file that overrides values in diagnostics JSON file
                        (default: None)
  -o DIAGNOSTICS_FILE_OUT, --diagnostics_file_out DIAGNOSTICS_FILE_OUT
                        Name of file to be written (default: marbl.diags)

"""

#######################################

def generate_diagnostics_file(default_diagnostics_file, MARBL_settings, diagnostics_file_in, diagnostics_file_out):
    """ Produce a list of MARBL diagnostic frequencies from a JSON parameter file
    """

    from MARBL_tools import MARBL_diagnostics_class
    MARBL_diagnostics = MARBL_diagnostics_class(default_diagnostics_file, MARBL_settings, diagnostics_file_in)

    fout = open(diagnostics_file_out,"w")
    # Sort variables by subcategory
    for diag_name in MARBL_diagnostics.diagnostics_dict.keys():
        fout.write("%s : %s\n" % (diag_name, MARBL_diagnostics.diagnostics_dict[diag_name]))
    fout.close()

#######################################

def _parse_args(marbl_root):
    """ Parse command line arguments
    """

    import argparse

    parser = argparse.ArgumentParser(description="Generate a MARBL settings file from a JSON file",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    # Command line argument to point to JSON settings file (default is $MARBLROOT/src/default_settings.json)
    parser.add_argument('-f', '--default_settings_file', action='store', dest='default_settings_file',
                        default=os.path.join(marbl_root, 'autogenerated_src', 'default_settings.json'),
                        help='Location of JSON-formatted MARBL settings configuration file')

    # Command line argument to point to JSON diagnostics file (default is $MARBLROOT/src/default_diagnostics.json)
    parser.add_argument('-j', '--default_diagnostics_file', action='store', dest='default_diagnostics_file',
                        default=os.path.join(marbl_root, 'autogenerated_src', 'default_diagnostics.json'),
                        help='Location of JSON-formatted MARBL diagnostics configuration file')

    # Is the GCM providing initial bury coefficients via saved state?
    parser.add_argument('-s', '--saved_state_vars_source', action='store', dest='saved_state_vars_source',
                        default='settings_file', choices = set(('settings_file', 'GCM')),
                        help="Source of initial value for saved state vars that can come from GCM or settings file")

    # Command line argument to specify resolution (default is None)
    parser.add_argument('-g', '--grid', action='store', dest='grid',
                        help='Some default values are grid-dependent')

    # Command line argument to specify an input settings file which would override the JSON
    parser.add_argument('-i', '--settings_file_in', action='store', dest='settings_file_in', default=None,
                        help='A file that overrides values in settings JSON file')

    # Command line argument to specify an input diagnostics file which would override the JSON
    parser.add_argument('-d', '--diagnostics_file_in', action='store', dest='diagnostics_file_in', default=None,
                        help='A file that overrides values in diagnostics JSON file')

    # Command line argument to where to write the input file being generated
    parser.add_argument('-o', '--diagnostics_file_out', action='store', dest='diagnostics_file_out', default='marbl.diags',
                        help='Name of file to be written')

    return parser.parse_args()

#######################################

if __name__ == "__main__":
    # We need marbl_root in python path so we can import MARBL_tools from generate_settings_file()
    import sys, os
    marbl_root = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
    sys.path.append(marbl_root)

    # Parse command-line arguments (marbl_root is used to set default for JSON file location)
    args = _parse_args(marbl_root)

    # Set up logging
    import logging
    logging.basicConfig(format='%(levelname)s (%(funcName)s): %(message)s', level=logging.DEBUG)

    from MARBL_tools import MARBL_settings_class
    DefaultSettings = MARBL_settings_class(args.default_settings_file, args.saved_state_vars_source, args.grid, args.settings_file_in)


    # Write the input file
    generate_diagnostics_file(args.default_diagnostics_file, DefaultSettings, args.diagnostics_file_in, args.diagnostics_file_out)
